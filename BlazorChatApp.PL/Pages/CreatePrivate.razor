@page "/createPrivate"
@using BlazorChatApp.BLL.Infrastructure.Interfaces
@using BlazorChatApp.BLL.MainRequestServices.Interfaces
@using BlazorChatApp.BLL.Responses
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavManager
@inject IRequestChatService RequestChatService
@inject IRequestUserService RequestUserService
@inherits BaseComponent 

<h1>There you can start messaging in private chat with defined user!</h1>

@if (isLoaded==false)
{
    <div class="loader" style="position: center">
    </div> <p>Loading...</p>
}
else
{
    <div class="container">
    <div class="align-content-xl-center">
        <form>
        @foreach (var user in users)
        {  
            <input type="hidden" id="userId" @bind-value="@user.Id"/>
            <button type="submit" class="room-button" @onclick="() => CreatePrivateChat(user.Id)">@user.UserName</button>
        }
        </form>
    </div>
</div>
}
@code
{
    bool isLoaded = false;
    List<IdentityUser> users = new List<IdentityUser>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAllUsersResponse getAllUsersResponse = await RequestUserService.GetAllUsersAsync();
            CheckIfUserHasAccess(getAllUsersResponse, async() => { users = await getAllUsersResponse.Users;});
            isLoaded = true;
            StateHasChanged();
        }
    }

    protected async void CreatePrivateChat(string userId)
    {
        CreateChatResponse isAllowedAccessToCreateChat =  await RequestChatService.CreatePrivateRoomAsync(userId);
        CheckIfUserHasAccess(isAllowedAccessToCreateChat, async () => NavManager.NavigateTo("/MyChats", true));
    }

}
    
