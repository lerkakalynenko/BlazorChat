@page "/createPrivate"
@using BlazorChatApp.BLL.Responses
@using Microsoft.AspNetCore.Identity
@using BlazorChatApp.BLL.RequestServices.Interfaces
@inject IRequestChatService RequestChatService
@inject IRequestUserService RequestUserService
@inject IToastService ToastService
@inherits BaseComponent 
<link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet"/>
<link href="https://stackpath.bootstrap.com/font-awasome/4.7.0/css/font-awesome.min.css" rel="stylesheet"/>
<h1>There you can start messaging in private chat with defined user!</h1>

@if (isLoaded==false)
{
    <div class="loader" style="position: center">
    </div> <p>Loading...</p>
}
else
{
    <div class="container">
    <div class="align-content-xl-center">
        @foreach (var user in users)
        {  
            <input type="hidden" id="userId" @bind-value="@user.Id"/>
            <button type="submit" class="room-button" @onclick="() => CreatePrivateChat(user.Id, user.UserName)">@user.UserName</button>
        }
    </div>
</div>
}
@code
{
    bool isLoaded = false;
    List<IdentityUser> users = new List<IdentityUser>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAllUsersResponse getAllUsersResponse = await RequestUserService.GetOtherUsersAsync();
            CheckIfUserHasAccess(getAllUsersResponse, async() => { users = await getAllUsersResponse.Users;});
            isLoaded = true;
            StateHasChanged();
        }
    }

    protected async void CreatePrivateChat(string userId, string userName)
    {
        CreateChatResponse isAllowedAccessToCreateChat =  await RequestChatService.CreatePrivateRoomAsync(userId);
        try
        {
            CheckIfUserHasAccess(isAllowedAccessToCreateChat, async () => ToastService.ShowSuccess($"User {userName} was added to your chats!"));
        }
        catch
        {
            ToastService.ShowError("Failed to add user!");
        }
    }
}
    
