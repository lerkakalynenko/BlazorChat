@page "/mainChatPage/{chatId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatApp.DAL.Domain.Entities
@using BlazorChatApp.BLL.Infrastructure.Interfaces
@using BlazorChatApp.BLL.Contracts.DTOs
@using BlazorChatApp.BLL.MainRequestServices.Interfaces
@using BlazorChatApp.BLL.Models
@using Castle.Core.Internal
@inject NavigationManager NavManager
@inject IRequestChatService RequestChatService
@inject IRequestMessageService RequestMessageService
@inject MessageDto Model
@inject ReplyToGroupModel ReplyModel
@inject ReplyToUserModel ReplyToUserModel
@inject IMessageService MessageService
@inject IRequestUserService RequestUserService
@inherits BaseComponent

<h2 style="text-align: center">@chat.ChatName</h2>
<link rel="stylesheet" 
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
@if (isLoaded == false)
{
    <div class="loader"></div>
    <p>Loading...</p>
}
else
{
    <div class="chat-body">
        @foreach (var msg in messages)
        {
            <div class="message">
                @if (chat.Type != ChatType.Private)
                {
                    <button type="button" class="btn btn-outline-info" @onclick="() => ChangeSendToReplyToUser(msg.UserId, msg.MessageText, msg.SenderName)">
                        <i class="fa fa-reply" style="font-size: 12px"></i>
                    </button>
                }
                <button type="button" class="btn btn-outline-warning" @onclick="() => ChangeSendToReply(msg.SenderName, msg.MessageText)">
                    <i class="fa fa-reply" style="font-size: 12px"></i>
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteMessageFromAll(msg.Id)">
                    <i class="fa fa-trash" style="font-size: 14px"></i>
                </button>
                <button type="submit" class="btn btn-outline-success" @onclick="() => ChangeSendToEdit(msg.Id, msg.MessageText)">
                    <i class="fa fa-edit" style="font-size: 12px"></i>
                </button>
                @if (msg.IsItReply)
                {
                    <header style="background-color: #e6dfe8">@msg.SenderName: </header>
                    <p style="background-color: #e6dfe8">
                        @msg.MessageText
                    </p>
                    <footer style="background-color: #e6dfe8">@msg.SentTime</footer>
                }
                else
                {
                    <header>@msg.SenderName: </header>
                    <p>
                        @msg.MessageText
                    </p>
                    <footer>@msg.SentTime</footer>
                }

            </div>
        }
    </div>
    <button class="btn btn-dark" style="flex-direction: row-reverse"disabled="@(!IsConnected)" @onclick="() => ReadMore()">Read more</button>
    <EditForm Model="Model" class="chat-input" OnSubmit="SendMessage">
        <InputText id="chat-input" @bind-Value="Model.InputField"></InputText>
        @if (!showEditBtn && !showReplyBtn && !showReplyToUserBtn)
        {
            <button disabled="@(!IsConnected && showEditBtn && Model.InputField.IsNullOrEmpty())" type="submit">Send</button>
        }
    </EditForm>
    
    @if (showEditBtn && !showReplyBtn && !showReplyToUserBtn)
    {
        <div class="chat-input">
            <button disabled="@(!IsConnected)" @onclick="() => EditMessage()">Edit</button>
        </div>
    }
    else if (!showEditBtn && showReplyBtn && !showReplyToUserBtn)
    {
        <div class="chat-input">
            <button disabled="@(!IsConnected)" @onclick="() => ReplyToGroup()">Reply</button>
        </div>
    }
    else if (showReplyToUserBtn && !showEditBtn && !showReplyBtn)
    {
        <div class="chat-input">
            <button disabled="@(!IsConnected)" @onclick="() => ReplyToUser()">Reply to user</button>
        </div>
    }
}

@code
{
    [Parameter]
    public int chatId { get; set; }
    private bool isLoaded = false;
    private bool showEditBtn = false;
    private bool showReplyBtn = false;
    private bool showReplyToUserBtn = false;

    private int quantityToSkip = 0;
    private int quantityToLoad = 20;

    HubConnection hubConnection;

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    List<Message>? messages = new List<Message>();
    private DAL.Domain.Entities.Chat? chat = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var getCurrentChatResponse = await RequestChatService.GetCurrentChat(chatId);
            CheckIfUserHasAccess(getCurrentChatResponse, async () => chat = getCurrentChatResponse.Chat);
            messages = (List<Message>?) await MessageService.GetMessages(chatId, quantityToSkip, quantityToLoad);
            messages.Reverse();
            isLoaded = true;
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri("/chatHub"), options => { options.UseDefaultCredentials = true; })
                .Build();
            hubConnection.On<Message>("ReceiveMessage", msg =>
            {
                messages.Add(msg);
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<Message>("ReceiveEditedMessage", msg =>
            {
                messages.Where(x => x.Id == msg.Id).ToList().ForEach(s => s.MessageText = msg.MessageText);
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<int>("DeleteMessageFromAll", Id =>
            {
                var message = messages.FirstOrDefault(x => x.Id == Id);
                messages.Remove(message);
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<List<Message>>("ReceiveLoadedMessages", messageList =>
            {
                foreach (var message in messageList)
                    messages.Insert(0, message);
            });
            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinRoom", chatId);

            StateHasChanged();
        }
    }

    private async void SendMessage()
    {
        Model.RoomName = chat.ChatName;
        Model.ChatId = chatId;
        if (showEditBtn == false)
        {
            var response = await RequestMessageService.SendMessage(Model.ChatId, Model.RoomName, Model.InputField);
            var message = response.Message;
            await hubConnection.SendAsync("SendMessage", chatId, message);
            Model.InputField = string.Empty;
        }
    }

    private async Task DeleteMessageFromAll(int messageId)
    {
        await hubConnection.SendAsync("DeleteFromAll", chatId, messageId);
        await InvokeAsync(StateHasChanged);
    }

    private async void ChangeSendToEdit(int messageId, string messageText)
    {
        showEditBtn = true;
        Model.InputField = messageText;
        Model.MessageId = messageId;
    }

    private async Task EditMessage()
    {
        await hubConnection.SendAsync("Edit", chatId, Model.MessageId, Model.InputField);
        showEditBtn = false;
        Model.InputField = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private void ChangeSendToReply(string userName, string repliedMsg)
    {
        showReplyBtn = true;
        ReplyModel.Reply = Model.InputField;
        ReplyModel.Message = repliedMsg;
        ReplyModel.UserName = userName;
    }

    private async Task ReplyToGroup()
    {
        var response = await RequestUserService.GetUserInfo();
        CheckIfUserHasAccess(response, async () =>
        {
            ReplyModel.SenderId = response.UserId;
            ReplyModel.SenderName = response.UserName;
        });
        if (Model.InputField != null)
        {
            ReplyModel.Reply = Model.InputField;
            ReplyModel.ChatId = chatId;
            await hubConnection.SendAsync("ReplyToGroup", ReplyModel);
            showReplyBtn = false;
            Model.InputField = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            showReplyBtn = false;
            Model.InputField = string.Empty;
        }
    }

    private void ChangeSendToReplyToUser(string userId, string repliedMsg, string userName)
    {
        showReplyToUserBtn = true;
        ReplyToUserModel.Reply = Model.InputField;
        ReplyToUserModel.Message = repliedMsg;
        ReplyToUserModel.SenderId = userId;
        ReplyToUserModel.SenderName = userName;
    }

    private async Task ReplyToUser()
    {
        var response = await RequestUserService.GetUserInfo();
        CheckIfUserHasAccess(response, async () =>
        {
            ReplyToUserModel.UserId = response.UserId;
            ReplyToUserModel.UserName = response.UserName;
        });
        if (ReplyToUserModel.SenderId != ReplyToUserModel.UserId && Model.InputField != null)
        {
            ReplyToUserModel.Reply = Model.InputField;
            var chatWithUserId = await
                MessageService.FindPrivateChat(ReplyToUserModel.SenderId, ReplyToUserModel.UserId);
            ReplyToUserModel.ChatId = chatWithUserId;
            await MessageService.ReplyToUser(ReplyToUserModel);
            showReplyToUserBtn = false;
            Model.InputField = string.Empty;

            ReplyToUserModel = null;
            NavManager.NavigateTo("/mainChatPage/" + chatWithUserId, true);
        }
        else
        {
            showReplyToUserBtn = false;
            Model.InputField = string.Empty;
        }
    }

    private async Task ReadMore()
    {
        quantityToSkip += quantityToLoad;
        await hubConnection.SendAsync("ReadMore", chatId, quantityToSkip, quantityToLoad);
    }

}