@page "/mainChatPage/{chatId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatApp.DAL.Domain.Entities
@using BlazorChatApp.BLL.Responses
@using BlazorChatApp.BLL.Infrastructure.Interfaces
@using BlazorChatApp.BLL.Contracts.DTOs
@using BlazorChatApp.BLL.Models
@inject NavigationManager NavManager
@inject IRequestService RequestService
@inject MessageDto Model
@inject ReplyToGroupModel ReplyModel
@inject ReplyToUserModel ReplyToUserModel
@inject IMessageService MessageService

@inherits BaseComponent

<h2 style="text-align: center">@chat.ChatName</h2>
<link rel="stylesheet" 
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
@if (isLoaded==false)
{
    <div class="loader"></div>
    <p>Loading...</p>
}
else
{
    <div class="chat-body">
        @foreach (var msg in chat.Messages)
        {
            <div class="message">
                @if (chat.Type != ChatType.Private)
                {
                    <button type="button" class="btn btn-outline-info" @onclick="() => ChangeSendToReplyToUser(msg.UserId, msg.MessageText, msg.SenderName)">
                        <i class="fa fa-reply" style="font-size: 15px"></i>
                    </button>
                }
                <button type="button" class="btn btn-outline-warning" @onclick="() => ChangeSendToReply(msg.SenderName, msg.MessageText)">
                    <i class="fa fa-reply" style="font-size: 15px"></i>
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteMessageFromAll(msg.Id)">
                    <i class="fa fa-trash" style="font-size: 15px"></i>
                </button>
                <button type="submit" class="btn btn-outline-success" @onclick="() => ChangeSendToEdit(msg.Id, msg.MessageText)">
                    <i class="fa fa-edit" style="font-size: 13px"></i>
                </button>
                <header>@msg.SenderName: </header>
                <p>
                    @msg.MessageText
                </p>
                <footer>@msg.SentTime</footer>
            </div>
        }
    </div>

    <EditForm Model="Model" class="chat-input" OnSubmit="SendMessage">
        <InputText id="chat-input" @bind-Value="Model.Message"></InputText>
        @if (!showEdit && !showReply && !showReplyToUser)
        {
            <button disabled="@(!IsConnected && showEdit)" type="submit">Send</button>
        }
    </EditForm>
    @if (showEdit && !showReply && !showReplyToUser)
    {
        <div class="chat-input">
            <button disabled="@(!IsConnected)" @onclick="() => EditMessage()">Edit</button>
        </div>
    }else if (!showEdit && showReply && !showReplyToUser)
    {
        <div class="chat-input">
            <button disabled="@(!IsConnected)" @onclick="() => ReplyToGroup()">Reply</button>
        </div>
    }else if (showReplyToUser && !showEdit && !showReply)
    {
        <div class="chat-input">
            <button disabled="@(!IsConnected)" @onclick="() => ReplyToUser()">Reply to user</button>
        </div>
    }
}

@code
{
    [Parameter]
    public int chatId { get; set; }
    HubConnection hubConnection;
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;
    bool isLoaded = false;
    private DAL.Domain.Entities.Chat? chat = new DAL.Domain.Entities.Chat();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetCurrentChatResponse getCurrentChatResponse = await RequestService.GetCurrentChat(chatId);
            CheckIfUserHasAccess(getCurrentChatResponse, async () => chat = getCurrentChatResponse.Chat);
            isLoaded = true;
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri("/chatHub"), options =>
                {
                    options.UseDefaultCredentials = true;
                })
                .Build();
            hubConnection.On<Message>("ReceiveMessage", msg =>
            {
                chat.Messages.Add(msg);
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinRoom", chatId);

            StateHasChanged();
        }
    }
    private async void SendMessage()
    {
        Model.RoomName = chat.ChatName;
        Model.ChatId = chatId;
        if (showEdit==false)
        {
            CreateMessageResponse response = await RequestService.SendMessage(Model.ChatId, Model.RoomName, Model.Message);
            var message = response.Message;
            await hubConnection.SendAsync("SendMessage",chatId, message);
            Model.Message = string.Empty;
        }
    }
    private async Task DeleteMessageFromAll(int messageId)
    {
        await hubConnection.SendAsync("DeleteFromAll", chatId, messageId);
        NavManager.NavigateTo("/mainChatPage/"+chatId, true);
        await InvokeAsync(StateHasChanged);
    }

    private bool showEdit = false;
    private async void ChangeSendToEdit(int messageId, string messageText)
    {
        showEdit = true;
        Model.Message = messageText;
        Model.MessageId = messageId;
    }

    private async Task EditMessage()
    {
        await hubConnection.SendAsync("Edit", Model.MessageId, Model.Message);
        showEdit = false;
        Model.Message = String.Empty;
        NavManager.NavigateTo("/mainChatPage/"+chatId, true);
        await InvokeAsync(StateHasChanged);
    }
    bool showReply = false;
    
    private void ChangeSendToReply(string userName, string repliedMsg)
    {
        showReply = true;
        ReplyModel.Reply = Model.Message;
        ReplyModel.Message = repliedMsg;
        ReplyModel.UserName = userName;
    }
   
    private async Task ReplyToGroup()
    {
        GetCurrentUserInfo response = await RequestService.GetUserInfo();
        CheckIfUserHasAccess(response, async () =>
        {
            ReplyModel.SenderId =  response.UserId;
            ReplyModel.SenderName = response.UserName;
        });

        ReplyModel.ChatId = chatId;
        await hubConnection.SendAsync("ReplyToGroup", ReplyModel);
        showReply = false;
        Model.Message=String.Empty;
        ReplyModel = null;
        await InvokeAsync(StateHasChanged);
    }

    bool showReplyToUser = false;

    private void ChangeSendToReplyToUser(string userId, string repliedMsg, string userName)
    {
        showReplyToUser = true;
        ReplyToUserModel.Reply = Model.Message;
        ReplyToUserModel.Message = repliedMsg;
        ReplyToUserModel.SenderId= userId;
        ReplyToUserModel.SenderName = userName;
    }

    private async Task ReplyToUser()
    {
        GetCurrentUserInfo response = await RequestService.GetUserInfo();
        CheckIfUserHasAccess(response, async () =>
        {
            ReplyToUserModel.UserId =  response.UserId;
            ReplyToUserModel.UserName = response.UserName;
        });
        if (ReplyToUserModel.SenderId != ReplyToUserModel.UserId)
        {
            int chatWithUserId = await 
                MessageService.FindPrivateChat(ReplyToUserModel.SenderId, ReplyToUserModel.UserId);
            ReplyToUserModel.ChatId = chatWithUserId;
            await MessageService.ReplyToUser(ReplyToUserModel);
            showReplyToUser = false;
            Model.Message=String.Empty;
        
            ReplyToUserModel = null;
            NavManager.NavigateTo("/mainChatPage/"+ chatWithUserId, true);
        }
        else
        {
            NavManager.NavigateTo("/mainChatPage/"+ chatId, true);
        }
        

    }
}