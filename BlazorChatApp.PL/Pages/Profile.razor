@page "/profile"
@using BlazorChatApp.DAL.CustomExtensions
@using BlazorChatApp.BLL.RequestServices.Interfaces
@using BlazorChatApp.BLL.Responses
@inject IToastService ToastService
@inherits BaseComponent

<link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet"/>
<link href="https://stackpath.bootstrap.com/font-awasome/4.7.0/css/font-awesome.min.css" rel="stylesheet"/>

<h1>Hello, @userName!</h1>
<br/>

<div class="input-group">
    <div class="">
        <InputFile class="room-button" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
        <label class="file" for="inputFile">Choose file</label>
    </div>
    <div>
        <button class="room-button" @onclick="Upload" disabled="@isDisabled">Upload</button>
    </div>
</div>

@foreach (var item in filesBase64)
{
    <img src="data:@item.Type;base64,@item.Data" />
}
<p>@message</p>

@if (isLoaded==false)
{
    <div class="loader" style="position: center">
    </div> <p>Loading...</p>
}
@code {
    [Inject] private IRequestUserService _userService { get; set; }
    List<BrowserImageFile> filesBase64 = new();
    string message = "InputFile";
    bool isDisabled;
    bool isLoaded =true;
    string userName = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            var response = await _userService.GetUserInfo();
            CheckIfUserHasAccess(response, async () =>
            {
                userName = response.UserName;
            });
            StateHasChanged();
            ShouldRender();
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        filesBase64.Clear();
        StateHasChanged();
        var files = e.GetMultipleFiles(); 
        
            var resizedFile = await files[0].RequestImageFileAsync(files[0].ContentType, 512, 512); 
            var buf = new byte[resizedFile.Size]; 
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); 
            }
            filesBase64.Add(new BrowserImageFile { Data = Convert.ToBase64String(buf), Type = files[0].ContentType, 
                Name = files[0].Name }); 
    }

    async Task Upload()
    {
        isLoaded = false;
        try
        {
            isDisabled = true;
            SaveProfileResponse response = await _userService.SaveUserProfileInfo(filesBase64[0]);
            CheckIfUserHasAccess(response, () =>
            {
                if (response.IsSavingSuccessful)
                {
                    message = $"{filesBase64[0].Name} was uploaded";
                    ToastService.ShowSuccess("Upload was successful!");
                    filesBase64.Clear();
                    StateHasChanged();
                }
                else
                {
                    ToastService.ShowError("Saving wasn't successful!");
                    filesBase64.Clear();
                    StateHasChanged();
                }
            });
           
        }
        catch (Exception e)
        {
            ToastService.ShowError("Failed to upload an image!");
            StateHasChanged();
            filesBase64.Clear();
            StateHasChanged();
        }
        isLoaded = true;
    }
}