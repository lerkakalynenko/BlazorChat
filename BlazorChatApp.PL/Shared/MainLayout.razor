@inject NavigationManager NavManager
@using BlazorChatApp.BLL.Infrastructure.Interfaces
@using Blazored.LocalStorage
@using BlazorChatApp.BLL.Helpers
@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject ILocalStorageService localStorage
<PageTitle>BlazorChatApp.PL</PageTitle>
<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <main>
        <div class="top-row px-4">
            <p>@notification</p>
            @if (status)
            {
                <NavLink class="nav-link" @onclick="Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                </NavLink>
            }
            else
            {
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Log in
                </NavLink>
                <NavLink class="nav-link" href="register">
                    <span class="oi oi-pencil" href="/register" aria-hidden="true"></span> Register
                </NavLink>
            }


        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    private bool status;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var userIsAuthed = await localStorage.GetItemAsync<string>("token");

        if (userIsAuthed == null)
        {
            status = false;
            StateHasChanged();
        }

        else
        {
            status = true;
            StateHasChanged();
        }
    }

    private string notification = "";
    protected async Task Logout()
    {
        if (TokenHolder.Token == null)
        {
            NavManager.NavigateTo("/login");
        }
        await AuthService.LogOutAsync();
    }
}